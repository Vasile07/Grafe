//
// Created by Irimie≈ü Vasile on 3/20/2023.
//
#include "DFS.h"
#include "vector"
#include "iostream"
#include "fstream"
#include "stack"

using namespace std;

void zerorizare(bool* viz, int n){
    for ( int i = 0 ; i <= n ; i ++ )
        viz[i] = false;
}

void problema_2(){
    int n, Matrice_Adiacenta[101][101], Matricea_Inchiderii[101][101];

    /// CITIREA MATRICEI DE ADIACENTA
    ifstream fin("problema_2.txt");
    fin >> n;
    for ( int i = 0 ; i <= n ; i++ )
        for (  int j = 0 ; j <= n ; j++ )
            fin >> Matrice_Adiacenta[i][j];
    fin.close();

    bool* viz = new bool[n+1];
    stack <int> S;

    for ( int nod = 0 ; nod <= n ; nod++ ){
        zerorizare(viz, n); // Zerorizam sirul de vizitati

        ///Parcurgerea in adancime - DFS
        S.push(nod);
        while( !S.empty() ){
            int u = S.top(); S.pop();
            if( !viz[u] ){
                viz[u] = true;
                for( int j = 0 ; j <= n ; j++ )
                    if ( Matrice_Adiacenta[u][j] == 1 and !viz[j] )
                        S.push(j);
            }
        }
        /// La finalul parcurgerii, in sirul viz vom avea TRUE pe pozitiile care reprezinta nodurile ce au putut fi
        /// accesate si FALSE altfel

        for ( int i = 0 ; i <= n ; i++ )
            Matricea_Inchiderii[nod][i] = (viz[i] ? 1 : 0);

    }

    /// AFISAREA MATRICII DE INCHIDERE
    for ( int i = 0 ; i <= n ; i++ ) {
        for (int j = 0; j <= n; j++)
            cout << Matricea_Inchiderii[i][j] << ' ';
        cout << '\n';
    }
}
