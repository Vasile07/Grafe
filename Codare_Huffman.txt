#include <iostream>
#include <vector>
#include <map>
#include <string>
#include <fstream>
#include <cstring>
#include <queue>

using std::string;
using std::map;
using std::vector;
using std::ifstream;
using std::ofstream;
using std::pair;
using std::priority_queue;

class Nod{
private:
    Nod* stang;
    Nod* drept;
    int frecv;
    char letter;
public:
    Nod(char letter, int frecv, Nod* stang, Nod* drept):letter{letter},frecv{frecv},stang{stang},drept{drept}{}
    int get_frecv() const {return frecv;}

    Nod* get_stang(){return stang;}
    Nod* get_drept(){return drept;}
    char get_letter() const{return letter;}

    bool operator<(const Nod*& nod2) const{
        return frecv < nod2->frecv || frecv == nod2->frecv && letter < nod2->letter ;
    }

};


vector<pair<char,int>> Codare(char text[]){

    vector<pair<char,int>> C;
    map<char,int> dictionar;

    for ( int i = 0 ; i < strlen(text) ;  i ++ )
        dictionar[text[i]] ++ ;

    for ( auto elem : dictionar )
        C.push_back(elem);

    return C;
}

class Comparator{
public:
    bool operator()(Nod* n1, Nod* n2){
        return n1->get_frecv() > n2->get_frecv() || n1->get_frecv() == n2->get_frecv() && n1->get_letter() > n2->get_letter();
    }
};

void encode(Nod* radacina, map<char,string>& dictionar, string s){
    if ( radacina != nullptr ){
        if ( radacina->get_stang() == nullptr && radacina->get_drept() == nullptr )
            dictionar[radacina->get_letter()] = s;
        encode(radacina->get_stang(),dictionar,s+"0");
        encode(radacina->get_drept(),dictionar,s+"1");
    }
}

void CodareHuffman(vector<pair<char,int>> C, map<char,string>& dictionar){
    int n = C.size();
    priority_queue<Nod*, vector<Nod*>, Comparator>Q;
    for ( auto elem : C) {
        Nod* z = new Nod{elem.first, elem.second, nullptr, nullptr};
        Q.push(z);
    }

    while(n!=1){
        auto x = Q.top(); Q.pop();
        auto y = Q.top(); Q.pop();
        Nod* z = new Nod{  std::min(x->get_letter(),y->get_letter()), x->get_frecv() + y->get_frecv() , x, y};
        Q.push(z);
        n--;
    }


    Nod* radacina = Q.top();
    encode(radacina, dictionar,"");
}

int main(int argc, char* argv[]) {

//    if ( argc != 2 ){
//        std:: cout << "Numar parametri invalid!\n";
//        return -1;
//    }

    char text[10001];

    ifstream fin("in.txt");
    fin.getline(text,10001);
    fin.close();

    auto C = Codare(text);

    ofstream fout("out.txt");
    fout << C.size() <<'\n';
    for ( auto elem : C )
        fout << elem.first << ' ' << elem.second << '\n';

    map<char,string>dictionar;
    CodareHuffman(C, dictionar);
    for ( int i = 0 ; i < strlen(text) ; i ++ )
        fout << dictionar[text[i]];

    return 0;
}
